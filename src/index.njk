---
layout: layouts/base.njk
title: Home
---

<header class="hero">
  <img src="/images/originals/post-images/xy-home-cover.webp" class="hero-image"
    alt="I am lying shirtless on a bed, gazing upward" loading="eager" />
  <div class="overlay">
    <h1 class="hero-title">Collected Without Commentary.</h1>
    <p class="hero-subtitle">Quiet Stills From a Place That Remains Off. Unposed. Undisturbed.</p>
  </div>
</header>

<main class="site-main">
    <div class="container">

      <section class="home-collections">
        <h2>Private Records</h2>
        <p class="home-section-subtext">A sequence of stills, kept for no one in particular.</p>

        <ul class="collection-list">
          {% set latestCollections = signedPhotoCollections %}
          {% for i in range(0, 4) %}
            {% set c = latestCollections[i] %}
            {% if c %}
              <li class="collection-item">
                <a href="/collections/{{ c.slug }}/" class="collection-link">
                  <div class="thumbnail-wrapper">
                    <div class="image-skeleton"></div>
                    <img data-photo="{{ c.cover_image_path }}" class="collection-thumb supabase-image" alt="{{ c.title }}" loading="lazy">
                  </div>
                  <span>{{ c.title }}</span>
                </a>
              </li>
            {% endif %}
          {% endfor %}
        </ul>
      </section>

      <section class="home-latest-post">
        <h2>Unposted Thoughts</h2>
        <p class="home-section-subtext">Thoughts that didnâ€™t ask to be heard. Quiet reflections from elsewhere.</p>

        {% set latestPosts = collections.posts | reverse %}
        <div class="latest-post-grid">
          {% for i in range(0, 6) %}
            {% set post = latestPosts[i] %}
            {% if post %}
              <a href="{{ post.url }}" class="latest-post-entry">
                {% if post.data.cover_image %}
                  <img src="{{ post.data.cover_image }}" alt="{{ post.data.title }}" class="post-thumb" loading="lazy">
                {% endif %}
                <p>{{ post.data.title }}</p>
              </a>
            {% endif %}
          {% endfor %}
        </div>

        <p class="view-all-posts">
          <a href="/posts">View all posts â†’</a>
        </p>
      </section>

    </div>
  </main>

<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/umd/supabase.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const supabase = window.supabaseClient || window.Supabase.createClient(
      "{{ env.SUPABASE_URL or env.NEXT_PUBLIC_SUPABASE_URL }}",
      "{{ env.SUPABASE_ANON_KEY or env.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"
    );

    // Dynamically set fresh signed URLs for home-collections images
    const images = document.querySelectorAll('.home-collections .supabase-image[data-photo]');
    for (const img of images) {
      const path = img.dataset.photo;
      if (!path) continue;

      const { data, error } = await supabase.storage.from('photos').createSignedUrl(path, 3600);
      if (data && data.signedUrl) {
        img.src = data.signedUrl;

        // âœ… Hide skeleton once image loads
        const skeleton = img.previousElementSibling;
        const applyFadeIn = () => {
          img.classList.add('loaded');
          if (skeleton) skeleton.style.display = 'none';
        };

        if (img.complete && img.naturalWidth !== 0) {
          applyFadeIn();
        } else {
          img.addEventListener('load', applyFadeIn);
        }

        img.addEventListener('error', () => {
          console.warn("ðŸš« Image failed to load:", img.src);
          if (skeleton) skeleton.style.display = 'none';
          img.alt = 'Image unavailable';
        });
      } else {
        img.alt = 'Image unavailable';
      }
    }

    // Ensure hero image animates when loaded
    const heroImg = document.querySelector('.hero-image');
    if (heroImg && heroImg.complete && heroImg.naturalWidth !== 0) {
      heroImg.classList.add('loaded');
    } else if (heroImg) {
      heroImg.addEventListener('load', () => {
        heroImg.classList.add('loaded');
      });
    }
  });
</script>
