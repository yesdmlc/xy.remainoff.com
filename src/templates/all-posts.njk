---
permalink: "/all-posts/"
eleventyExcludeFromCollections: false
---
{% extends "layouts/base.njk" %}

{% block content %}
<h1>All Posts</h1>

<div class="view-toggle">
  <button id="toggleView" class="toggle-button">
    <span class="toggle-icon">ðŸ”²</span>
    <span class="toggle-label">View as Feed</span>
  </button>
</div>

<section class="post-feed">
  {% set markdownPosts = collections.posts | filterPublicMarkdownPosts %}
  {% set allPosts = (supabasePosts | merge(markdownPosts)) | sortByDate %}

  {% for post in allPosts %}
    {% set postData = post.data or post %}
    {% set imagePath = postData.cover_image_path or postData.cover_image or postData.image %}

    <article class="post-entry">
      <a href="{{ post.url or '/posts/' + postData.slug + '/' }}" class="post-link">
        <div class="post-card">
          <div class="post-thumb-wrapper">
            {% if imagePath %}
              <img
                data-base="{{ imagePath }}"
                alt="{{ postData.alt or postData.title or post.fileSlug }}"
                class="post-thumb supabase-image"
                loading="lazy"
              />
            {% endif %}
          </div>
          <div class="post-caption">
            {% if postData.caption %}
              <p>{{ postData.caption }}</p>
            {% else %}
              <p>{{ postData.content | striptags | truncate(120, true, '...') }}</p>
            {% endif %}
            <small>
              {% if postData.date %}
                {{ postData.date | date("yyyy-MM-dd") }}
              {% else %}
                No date
              {% endif %}
            </small>
          </div>
        </div>
      </a>
    </article>
  {% endfor %}
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('toggleView');
    const icon = toggleBtn?.querySelector('.toggle-icon');
    const label = toggleBtn?.querySelector('.toggle-label');
    const feed = document.querySelector('.post-feed');

    if (!toggleBtn || !feed || !icon || !label) return;

    toggleBtn.style.opacity = 0;
    toggleBtn.style.transition = 'opacity 0.8s ease';
    requestAnimationFrame(() => { toggleBtn.style.opacity = 1; });

    feed.classList.add('grid-view');
    icon.textContent = 'ðŸ”²';
    label.textContent = 'View as Feed';

    toggleBtn.addEventListener('click', () => {
      const isGrid = feed.classList.contains('grid-view');
      feed.classList.toggle('grid-view', !isGrid);
      feed.classList.toggle('feed-view', isGrid);
      icon.textContent = isGrid ? 'ðŸ“ƒ' : 'ðŸ”²';
      label.textContent = isGrid ? 'View as Grid' : 'View as Feed';
    });

    const supabase = window.supabaseClient || window.Supabase.createClient(
      window.SUPABASE_URL || '',
      window.SUPABASE_ANON_KEY || ''
    );

    const tryExtensions = async (basePath, extensions = ['.jpg', '.jpeg']) => {
      for (const ext of extensions) {
        const fullPath = `${basePath}${ext}`;
        const { data } = await supabase.storage.from('media').createSignedUrl(fullPath, 3600);
        if (data?.signedUrl) return data.signedUrl;
      }
      return null;
    };

    document.querySelectorAll('.supabase-image').forEach(async (img) => {
      const basePath = img.dataset.base;
      if (!basePath) return;
      const signedUrl = await tryExtensions(basePath);
      if (signedUrl) {
        img.src = signedUrl;
      }
    });
  });
</script>

<script>
  window.SUPABASE_CONFIG = JSON.parse('{{ "" | supabaseConfig | safe }}');
</script>
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/umd/supabase.js" defer></script>
{% endblock %}